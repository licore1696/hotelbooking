@page "/review/{hotelId:int}"
@using HotelBooking.BookingDTO.HotelDtos
@using HotelBooking.BookingDTO.ReviewDtos
@using HotelBooking.BookingDTO.UserDTOs
@using HotelBooking.Services.Contracts
@using HotelBooking.Web.Requests

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IUserService _userService
@inject ISnackbar Snackbar
@inject ApiTokenService _tokenService
@inject IReviewService _reviewService
@inject IHotelService _hotelService

<style>
    .flex-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
    }

    .hotelCard {
        width: 100%;
        display: flex;
    }

    .image_card {
        width: 184px; /* Установите ширину изображения */
        height: auto;
        margin-right: 10px; /* Отступ справа от изображения */
    }

    .relative-position {
        flex-grow: 1; /* Занимает оставшееся пространство */
    }

    .flex-item .relative-position {
        flex-grow: 1;
        padding-bottom: 8px;
    }

    .flex-container.align-start {
        align-items: flex-start;
        height: 24px;
        margin-top: 16px;
    }

    .baseline-align {
        align-items: baseline;
        display: flex;
    }

    .flex-item .text-large, .flex-item .text-bold {
        font-size: 21px;
        line-height: 28px;
    }

    .center-align {
        align-items: center;
        display: flex;
    }

    .text-medium {
        font-size: 15px;
    }

    .text-bold, .text-large {
        font-size: 21px;
        line-height: 28px;
    }

    .text-bold {
        align-items: center;
        color: var(--color-black);
        display: flex;
        font-weight: 500;
        min-width: 0;
    }

    .text-large {
        font-weight: 700;
        margin-left: 16px;
    }

    .hotelCard {
        display: flex;
    }
</style>

<div class="hotelCard">
    <div class="image_card">
        <MudImage Src=@($"/images/{hotel.Id}/preview.jpg" ) Width="184" Alt="hotel preview" Elevation="25" Class="rounded-lg" />
    </div>
    <div class="relative-position">
        <div class="flex-container hotel-info">
            <div class="center-align">
                <div class="text-medium">Отель</div>
            </div>
        </div>
        <div class="flex-container hotel-name">
            <div class="text-bold">
                <div class="hotel-title" title="@hotel.Name">
                    <span><span class="">@hotel.Name</span></span>
                </div>
            </div>
        </div>
        <div class="flex-container location-info">
            <div class="location-text"><span class="city-name">@hotel.Country, </span><span class="distance-to-center">@hotel.Address</span></div>
        </div>
        
    </div>
</div>




<style>
    .form-container {
        display: flex;
        flex-direction: column;
        max-width: 400px; /* или другое значение по вашему усмотрению */
        margin: 20px auto 0; /* добавляем отступ сверху */
        padding: 20px; /* добавляем внутренний отступ для улучшения визуального восприятия */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* добавляем тень */
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
        margin-top: 16px; /* или другое значение по вашему усмотрению */
    }

    /* Дополнительные стили по необходимости */
</style>

<div class="form-container">
    <div class="rating-container">
        <MudRating @bind-SelectedValue="@rating" MaxValue="10" />
        
    </div>

    <div class="description-field">
        <MudTextField @bind-Value="Description" Label="Description" Multiline="true" />
    </div>
    <div class="button-container">
        <MudButton Variant="Variant.Filled" OnClick="@CreateReview">Отправить</MudButton>

    </div>
</div>

@code {
    [Parameter]
    public int hotelId{ get; set; }

    private UpdateUserDto UserData { get; set; } = new UpdateUserDto();
    private string Description = "";
    private int rating = 9;
    private HotelDto hotel = new HotelDto();
    protected override async Task OnInitializedAsync()
    {
        var token = await _tokenService.GetToken();

        if (string.IsNullOrEmpty(token))
        {

            string currentUrl = Navigation.ToAbsoluteUri(Navigation.Uri).ToString();
            Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(currentUrl)}");

        }
        else
        {
            var userId = await _tokenService.GetUserIdFromToken();
            if (userId == -1)
            {
                string currentUrl = Navigation.ToAbsoluteUri(Navigation.Uri).ToString();
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(currentUrl)}");

                Snackbar.Add("Действие ссессии прекращено, войдите заново", Severity.Error);
            }
            UserData = await _userService.GetProfile(userId);
            hotel = await _hotelService.GetById(hotelId);

        }
    }
    private async Task CreateReview()
    {
        var reviewToCreate = new ReviewDto()
            {
                HotelId = hotel.Id,
                UserId = UserData.Id,
                Username = UserData.Username,
                Rating = rating,
                Comment = Description,
                CreatedAt = DateTime.UtcNow,
            };

        await _reviewService.Create(reviewToCreate);
        Navigation.NavigateTo($"/hotel/{hotel.Id}");
    }


}
