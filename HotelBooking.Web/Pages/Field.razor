@page "/"
@using HotelBooking.BookingDTO.HotelDtos
@using HotelBooking.BookingDTO.RoomDtos
@using HotelBooking.BookingDTO.Search
@using HotelBooking.Services.Contracts
@using System.Text.Json


@inject IJSRuntime _jsRuntime;

@inject IHotelService _hotelService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer>
    <MudGrid Spacing="0">
        <MudItem xs="3" sm="3">
            <MudAutocomplete T="string" Label="Выберите город" @bind-Value="location" Required="true"
                 SearchFunc="@Search" ToStringFunc="@((string location) => location)"> </MudAutocomplete>
        </MudItem>
        <MudItem xs="4" Class="mud-width-70">
            <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" Required="true" />
        </MudItem>
        <MudItem xs="4">
            <div class="d-flex" style="height: 100%;">
                <MudButton @onclick="ToggleMenu" Id="menuButton" Variant="Variant.Text" Color="Color.Default" FullWidth="true" style="height: 100%;">
                    <div class="d-flex">
                        <MudText>@persons().ToString() @namePersons(), @roomcount().ToString() @nameRooms()</MudText>
                    </div>
                </MudButton>
                <MudPopover AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Open="@isMenuVisible" >
                
                   
                        <div class="d-flex flex-column w-100">
                                @foreach (var (card, index) in cards.Select((card, index) => (card, index)))
                            {
                                <MudTypography class="d-flex align-items-center">
									<strong class="mr-2">@(@index + 1) номер</strong>
                                    <div class="ml-auto">
                                        @if (roomcount() > 1)
                                        {
                                            <MudButton OnClick="@(() => RemoveRoomCardDto(card))" >Удалить</MudButton>
                                        }
                                    </div>
                                </MudTypography>
                                <MudRoomCardDto Class="mud-elevation-2 mb-2">
                                    <RoomCardDtoContent>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <MudButton OnClick="@(() => Subtract(card))" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@IsSubtractDisabled(card)">-</MudButton>
                                            <MudTypography Typo="Typo.h5" Class="mb-2 align-text-center">@card.Capacity</MudTypography>
                                            <MudButton OnClick="@(() => Add(card))" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@IsAddDisabled(card)">+</MudButton>
                                             
                                         </div>
                                          

                                    </RoomCardDtoContent>
                                </MudRoomCardDto>
                            }
                            @if (!IsAddRoomDisabled())
                            {
                                <MudButton OnClick="@AddRoomCardDto" Color="Color.Primary">+ Добавить номер</MudButton>
                            }
                        </div>
                    
                
                </MudPopover>
            </div>
        </MudItem>
        <MudItem xs = "1">
            <MudButton OnClick="@Hotels" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary">Найти</MudButton>
        </MudItem>
        
    </MudGrid>
</MudContainer>
<MudContainer Class="pa-10">
    <MudGrid Spacing="2">
        @if (filteredHotels != null && filteredHotels.Any())
        {
            @foreach (var hotel in filteredHotels)
            {
                <style>
                    .flex-container {
                        display: flex;
                        align-items: center;
                        justify-content: space-between;
                        width: 100%;
                    }

                    .hotelCard {
                        width: 100%;
                        display: flex;
                    }

                    .image_card {
                        width: 184px; /* Установите ширину изображения */
                        height: auto;
                        margin-right: 10px; /* Отступ справа от изображения */
                    }

                    .relative-position {
                        flex-grow: 1; /* Занимает оставшееся пространство */
                    }

                    .flex-item .relative-position {
                        flex-grow: 1;
                        padding-bottom: 8px;
                    }

                    .flex-container.align-start {
                        align-items: flex-start;
                        height: 24px;
                        margin-top: 16px;
                    }

                    .baseline-align {
                        align-items: baseline;
                        display: flex;
                    }

                    .flex-item .text-large, .flex-item .text-bold {
                        font-size: 21px;
                        line-height: 28px;
                    }

                    .center-align {
                        align-items: center;
                        display: flex;
                    }

                    .text-medium {
                        font-size: 15px;
                    }

                    .text-bold, .text-large {
                        font-size: 21px;
                        line-height: 28px;
                    }

                    .text-bold {
                        align-items: center;
                        color: var(--color-black);
                        display: flex;
                        font-weight: 500;
                        min-width: 0;
                    }

                    .text-large {
                        font-weight: 700;
                        margin-left: 16px;
                    }

                    .hotelCard {
                        display: flex;
                    }
                </style>

                <div class="hotelCard">
                    <div class="image_card">
                        <MudImage Src=@($"/images/{hotel.Id}/preview.jpg" ) Width="184" Alt="hotel preview" Elevation="25" Class="rounded-lg" />
                    </div>
                    <div class="relative-position">
                        <div class="flex-container align-start">
                            <div>
                                <div class="rating-container">
                                    <div class="baseline-align rating">
                                        <div class="rating-value bold-text">@hotel.Rating</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="flex-container hotel-info">
                            <div class="center-align">
                                <div class="rating-stars">
                                    <MudRating ReadOnly="true" SelectedValue="@hotel.Stars" />
                                </div>
                                <div class="text-medium">Отель</div>
                            </div>
                        </div>
                        <div class="flex-container hotel-name">
                            <div class="text-bold">
                                <div class="hotel-title" title="@hotel.Name">
                                    <span><span class="">@hotel.Name</span></span>
                                </div>
                            </div>
                            <span class="price text-large">
                                <span>@hotel.PricePerNight $</span>

                                <span></span>
                            </span>
                        </div>
                        <div class="flex-container location-info">
                            <div class="location-text"><span class="city-name">@hotel.Country, </span><span class="distance-to-center">@hotel.Address</span></div>
                        </div>
                        <div class="flex-container action-buttons">
                            <div class="button-container">
                                <div class="button-wrapper">
                                    <div class="button-placeholder">
                                    </div>
                                </div>
                            </div>
                            <div class="button-primary large-button">
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => NavigateToHotelPage(hotel))">Выбрать</MudButton>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
        }
        else
        {
            <MudTypography Typo="Typo.body1" Class="mud-text-center mt-4">Нет доступных отелей</MudTypography>
        }
    </MudGrid>
</MudContainer>
@code {
    public bool isMenuVisible { get; set; } = false;
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
    private bool _isMenuOpen = false;
    private List<HotelDto> filteredHotels;

    private void ToggleMenu()
    {
        isMenuVisible = !isMenuVisible;
    }


    private class Icons
    {
        public class Filled
        {
            public const string Menu = "@iconify-icons/mdi-light/menu";
            public const string ArrowDropDown = "@iconify-icons/mdi-light/arrow-drop-down";
        }
    }
    private string location;
    private string[] locations = { "Париж, Франция", "Нью-Йорк, США", "Токио, Япония", "Рим, Италия", "Барселона, Испания", "Лондон, Великобритания", "Дубай, ОАЭ", "Рио-де-Жанейро, Бразилия", "Сидней, Австралия", "Кейптаун, ЮАР", "Бангкок, Таиланд", "Истанбул, Турция", "Венеция, Италия", "Стокгольм, Швеция", "Сан-Франциско, США", "Киото, Япония", "Берлин, Германия", "Прага, Чехия", "Амстердам, Нидерланды", "Сантьяго, Чили" };

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return locations;

        return locations.Where(location => location.ToLower().Contains(value.ToLower()));
    }
    private List<RoomCardDto> cards = new List<RoomCardDto>();
    private int persons(){
        int pers = 0;
        foreach (var card in cards)
        {
            pers = pers + card.Capacity;
        }
        return pers;
    }
    private string namePersons(){
        int countpersons = persons();
        if(countpersons == 1 || countpersons == 21 || countpersons == 31){return "гость";}
        if(countpersons >= 2 && countpersons <= 4 ||countpersons >= 22 && countpersons <= 24 ||countpersons >= 32 && countpersons <= 34){return "гостя";}
        if(countpersons >= 5 ){return "гостей";}
        return "гостей";
    }
    private int roomcount(){
        return cards.Count;
    }
    private string nameRooms(){
        int countRooms = roomcount();
        if(countRooms == 1){return "комната";}
        if(countRooms >= 2 && countRooms <= 4){return "комнаты";}
        if(countRooms >= 5 && countRooms <= 6){return "комнат";}
        return "комнат";
    }
    private void AddRoomCardDto()
    {
        var newRoomCardDto = new RoomCardDto { Capacity = 1 };
        cards.Add(newRoomCardDto);
    }

    private void RemoveRoomCardDto(RoomCardDto card)
    {
        cards.Remove(card);
    }

    private void Add(RoomCardDto card)
    {
        card.Capacity++;
    }

    private void Subtract(RoomCardDto card)
    {
        if (card.Capacity > 1)
        {
            card.Capacity--;
        }
    }
    private bool IsAddRoomDisabled() => cards.Count >= 6;
    private bool IsAddDisabled(RoomCardDto card) => card.Capacity >= 6;
    private bool IsSubtractDisabled(RoomCardDto card) => card.Capacity <= 1;
    protected override async  void  OnInitialized()
    {
        base.OnInitialized();
        location = "Париж, Франция";
        cards.Add(new RoomCardDto { Capacity = 2 });
        await Hotels();
    }

    private async Task Hotels()
    {
        var locationParts = location.Split(", ");
        var city = locationParts[0];
        var country = locationParts.Length > 1 ? locationParts[1] : "";
        Console.WriteLine($"City: {city}, Country: {country}, Checkin: {_dateRange.Start.GetValueOrDefault()}, Checkout: {_dateRange.End.GetValueOrDefault()}");

        foreach (var card in cards)
        {
            // Отладочная информация
            Console.WriteLine($"Room Capacity: {card.Capacity}");
        }

        SearchDto filter = new SearchDto
            {
                Country = country,
                City = city,
                Checkin = _dateRange.Start.GetValueOrDefault(),
                CheckOut = _dateRange.End.GetValueOrDefault(),
                TypeRooms = cards
            };
        Console.WriteLine($"Sending filter to GetAvailableHotels: {filter}");

        filteredHotels = await _hotelService.GetAvailableHotels(filter);

    }
    private async void NavigateToHotelPage(HotelDto hotel)
    {
        var roomsJson = JsonSerializer.Serialize(cards);
        await _jsRuntime.InvokeVoidAsync("localStorage.setItem", "selectedRooms", roomsJson);

        var datesJson = JsonSerializer.Serialize(new
        {
            Checkin = _dateRange.Start.GetValueOrDefault(),
            Checkout = _dateRange.End.GetValueOrDefault()
        });
        await _jsRuntime.InvokeVoidAsync("localStorage.setItem", "selectedDates", datesJson);


        NavigationManager.NavigateTo($"/hotel/{hotel.Id}");
          
    }

}