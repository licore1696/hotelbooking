@page "/filter"

<MudContainer>
    <MudGrid Spacing="0">
        <MudItem xs="3" sm="3">
            <MudAutocomplete T="string" Label="Выберите город" @bind-Value="selectedCity"
                 SearchFunc="@Search" ToStringFunc="@((string city) => city)"> </MudAutocomplete>
        </MudItem>
        <MudItem xs="4" Class="mud-width-70">
        <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" />
        </MudItem>
        <MudItem xs="4" sm="4">
            <MudExpansionPanel Variant="Variant.Text">
                <TitleContent>
                    <div class="d-flex">
                       <MudText>@persons().ToString() @namePersons(), @roomcount().ToString() @nameRooms() </MudText>  
                    </div>
                </TitleContent>
                <ChildContent>
                    <ExpansionPanelDetails>
                        <div class="d-flex flex-column w-100">
                                @foreach (var (card, index) in cards.Select((card, index) => (card, index)))
                            {
                                <MudTypography class="d-flex align-items-center">
                                    <strong class="mr-2">Номер: @(@index + 1)</strong>
                                    <div class="ml-auto">
                                        @if (roomcount() > 1)
                                        {
                                            <MudButton OnClick="@(() => RemoveCard(card))" >Удалить</MudButton>
                                        }
                                    </div>
                                </MudTypography>
                                <MudCard Class="mud-elevation-2 mb-2">
                                    <CardContent>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <MudButton OnClick="@(() => Subtract(card))" Variant="Variant.Filled" Color="Color.Primary" Disabled="@IsSubtractDisabled(card)">-</MudButton>
                                            <MudTypography Typo="Typo.h5" Class="mb-2 align-text-center">@card.Number</MudTypography>
                                            <MudButton OnClick="@(() => Add(card))" Variant="Variant.Filled" Color="Color.Primary" Disabled="@IsAddDisabled(card)">+</MudButton>
                                             
                                         </div>
                                          

                                    </CardContent>
                                </MudCard>
                            }
                            @if (!IsAddRoomDisabled())
                            {
                                <MudButton OnClick="@AddCard" Color="Color.Primary">+ Добавить номер</MudButton>
                            }
                        </div>
                    </ExpansionPanelDetails>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
        <MudItem xs = "1">
            <MudButton OnClick="@Hotels" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary">Найти</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
    private bool _isMenuOpen = false;

    private void ToggleMenu()
    {
        _isMenuOpen = !_isMenuOpen;
    }

    private class Icons
    {
        public class Filled
        {
            public const string Menu = "@iconify-icons/mdi-light/menu";
            public const string ArrowDropDown = "@iconify-icons/mdi-light/arrow-drop-down";
        }
    }
    private string selectedCity;
    private string[] cities = { "Париж", "Нью-Йорк", "Токио", "Рим", "Барселона", "Лондон", "Дубай", "Рио-де-Жанейро", "Сидней", "Кейптаун", "Бангкок", "Истанбул", "Венеция", "Стокгольм", "Сан-Франциско", "Киото", "Берлин", "Прага", "Амстердам", "Сантьяго" };

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return cities;

        
        return cities.Where(city => city.ToLower().Contains(value.ToLower()));
    }
    private List<Card> cards = new List<Card>();

    private class Card
    {
        public int Number { get; set; }
    }
    private int persons(){
        int pers = 0;
        foreach (var card in cards)
        {
            pers = pers + card.Number;
        }
        return pers;
    }
    private string namePersons(){
        int countpersons = persons();
        if(countpersons == 1 || countpersons == 21 || countpersons == 31){return "гость";}
        if(countpersons >= 2 && countpersons <= 4 ||countpersons >= 22 && countpersons <= 24 ||countpersons >= 32 && countpersons <= 34){return "гостя";}
        if(countpersons >= 5 ){return "гостей";}
        return "гостей";
    }
    private int roomcount(){
        return cards.Count;
    }
    private string nameRooms(){
        int countRooms = roomcount();
        if(countRooms == 1){return "комната";}
        if(countRooms >= 2 && countRooms <= 4){return "комнаты";}
        if(countRooms >= 5 && countRooms <= 6){return "комнат";}
        return "комнат";
    }
    private void AddCard()
    {
        var newCard = new Card { Number = 1 };
        cards.Add(newCard);
    }

    private void RemoveCard(Card card)
    {
        cards.Remove(card);
    }

    private void Add(Card card)
    {
        card.Number++;
    }

    private void Subtract(Card card)
    {
        if (card.Number > 1)
        {
            card.Number--;
        }
    }
    private bool IsAddRoomDisabled() => cards.Count >= 6;
    private bool IsAddDisabled(Card card) => card.Number >= 6;
    private bool IsSubtractDisabled(Card card) => card.Number <= 1;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        cards.Add(new Card { Number = 2 });
    }

    private Task Hotels()
    {
        return null;
    }
}