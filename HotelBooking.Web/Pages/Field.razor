@page "/filter"
@using HotelBooking.BookingDTO.HotelDtos
@using HotelBooking.BookingDTO.RoomDtos
@using HotelBooking.BookingDTO.Search
@using HotelBooking.Services.Contracts

@inject IHotelService _hotelService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer>
    <MudGrid Spacing="0">
        <MudItem xs="3" sm="3">
            <MudAutocomplete T="string" Label="Выберите город" @bind-Value="location"
                 SearchFunc="@Search" ToStringFunc="@((string location) => location)"> </MudAutocomplete>
        </MudItem>
        <MudItem xs="4" Class="mud-width-70">
        <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" />
        </MudItem>
        <MudItem xs="4" sm="4">
            <MudExpansionPanel Variant="Variant.Text">@*будет переделать на mudselect с кастомными полями*@
                <TitleContent>
                    <div class="d-flex">
                       <MudText>@persons().ToString() @namePersons(), @roomcount().ToString() @nameRooms() </MudText>  
                    </div>
                </TitleContent>
                <ChildContent>
                    <ExpansionPanelDetails>
                        <div class="d-flex flex-column w-100">
                                @foreach (var (card, index) in cards.Select((card, index) => (card, index)))
                            {
                                <MudTypography class="d-flex align-items-center">
									<strong class="mr-2">@(@index + 1) номер</strong>
                                    <div class="ml-auto">
                                        @if (roomcount() > 1)
                                        {
                                            <MudButton OnClick="@(() => RemoveRoomCardDto(card))" >Удалить</MudButton>
                                        }
                                    </div>
                                </MudTypography>
                                <MudRoomCardDto Class="mud-elevation-2 mb-2">
                                    <RoomCardDtoContent>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <MudButton OnClick="@(() => Subtract(card))" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@IsSubtractDisabled(card)">-</MudButton>
                                            <MudTypography Typo="Typo.h5" Class="mb-2 align-text-center">@card.Capacity</MudTypography>
                                            <MudButton OnClick="@(() => Add(card))" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@IsAddDisabled(card)">+</MudButton>
                                             
                                         </div>
                                          

                                    </RoomCardDtoContent>
                                </MudRoomCardDto>
                            }
                            @if (!IsAddRoomDisabled())
                            {
                                <MudButton OnClick="@AddRoomCardDto" Color="Color.Primary">+ Добавить номер</MudButton>
                            }
                        </div>
                    </ExpansionPanelDetails>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
        <MudItem xs = "1">
            <MudButton OnClick="@Hotels" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary">Найти</MudButton>
        </MudItem>
        
    </MudGrid>
</MudContainer>
<MudContainer>
    <MudGrid Spacing="2">
        @if (filteredHotels != null && filteredHotels.Any())
        {
            @foreach (var hotel in filteredHotels)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard>
                        <MudCardMedia>
                            <img src="" alt="@hotel.Name" />
                        </MudCardMedia>
                        <MudCardContent>
                            <MudTypography Typo="Typo.h6" Class="mb-2">@hotel.Name</MudTypography>
                            <MudTypography Typo="Typo.caption">@hotel.Description</MudTypography>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Color="Color.Primary">Подробнее</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudTypography Typo="Typo.body1" Class="mud-text-center mt-4">Нет доступных отелей</MudTypography>
        }
    </MudGrid>
</MudContainer>
@code {
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
    private bool _isMenuOpen = false;
    private List<HotelDto> filteredHotels;

    private void ToggleMenu()
    {
        _isMenuOpen = !_isMenuOpen;
    }

    private class Icons
    {
        public class Filled
        {
            public const string Menu = "@iconify-icons/mdi-light/menu";
            public const string ArrowDropDown = "@iconify-icons/mdi-light/arrow-drop-down";
        }
    }
    private string location;
    private string[] locations = { "Париж, Франция", "Нью-Йорк, США", "Токио, Япония", "Рим, Италия", "Барселона, Испания", "Лондон, Великобритания", "Дубай, ОАЭ", "Рио-де-Жанейро, Бразилия", "Сидней, Австралия", "Кейптаун, ЮАР", "Бангкок, Таиланд", "Истанбул, Турция", "Венеция, Италия", "Стокгольм, Швеция", "Сан-Франциско, США", "Киото, Япония", "Берлин, Германия", "Прага, Чехия", "Амстердам, Нидерланды", "Сантьяго, Чили" };

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return locations;

        return locations.Where(location => location.ToLower().Contains(value.ToLower()));
    }
    private List<RoomCardDto> cards = new List<RoomCardDto>();
    private int persons(){
        int pers = 0;
        foreach (var card in cards)
        {
            pers = pers + card.Capacity;
        }
        return pers;
    }
    private string namePersons(){
        int countpersons = persons();
        if(countpersons == 1 || countpersons == 21 || countpersons == 31){return "гость";}
        if(countpersons >= 2 && countpersons <= 4 ||countpersons >= 22 && countpersons <= 24 ||countpersons >= 32 && countpersons <= 34){return "гостя";}
        if(countpersons >= 5 ){return "гостей";}
        return "гостей";
    }
    private int roomcount(){
        return cards.Count;
    }
    private string nameRooms(){
        int countRooms = roomcount();
        if(countRooms == 1){return "комната";}
        if(countRooms >= 2 && countRooms <= 4){return "комнаты";}
        if(countRooms >= 5 && countRooms <= 6){return "комнат";}
        return "комнат";
    }
    private void AddRoomCardDto()
    {
        var newRoomCardDto = new RoomCardDto { Capacity = 1 };
        cards.Add(newRoomCardDto);
    }

    private void RemoveRoomCardDto(RoomCardDto card)
    {
        cards.Remove(card);
    }

    private void Add(RoomCardDto card)
    {
        card.Capacity++;
    }

    private void Subtract(RoomCardDto card)
    {
        if (card.Capacity > 1)
        {
            card.Capacity--;
        }
    }
    private bool IsAddRoomDisabled() => cards.Count >= 6;
    private bool IsAddDisabled(RoomCardDto card) => card.Capacity >= 6;
    private bool IsSubtractDisabled(RoomCardDto card) => card.Capacity <= 1;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        cards.Add(new RoomCardDto { Capacity = 2 });
    }

    private async Task Hotels()
    {
        var locationParts = location.Split(", ");
        var city = locationParts[0];
        var country = locationParts.Length > 1 ? locationParts[1] : "";
        Console.WriteLine($"City: {city}, Country: {country}, Checkin: {_dateRange.Start.GetValueOrDefault()}, Checkout: {_dateRange.End.GetValueOrDefault()}");

        foreach (var card in cards)
        {
            // Отладочная информация
            Console.WriteLine($"Room Capacity: {card.Capacity}");
        }

        SearchDto filter = new SearchDto
            {
                Country = country,
                City = city,
                Checkin = _dateRange.Start.GetValueOrDefault(),
                CheckOut = _dateRange.End.GetValueOrDefault(),
                TypeRooms = cards
            };
        Console.WriteLine($"Sending filter to GetAvailableHotels: {filter}");

        filteredHotels = await _hotelService.GetAvailableHotels(filter);
        
    }


}