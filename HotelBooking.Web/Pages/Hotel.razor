@page "/hotel/{hotelId:int}"

@using HotelBooking.BookingDTO.HotelDtos
@using HotelBooking.BookingDTO.RoomDtos
@using HotelBooking.BookingDTO.SearchDtos
@using HotelBooking.Services.Contracts
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json

@inject IJSRuntime JSRuntime

@inject IHotelService _hotelService;
@inject IRoomService _roomservice;
<MudContainer>
    <MudPaper Class="mud-elevation-3 p-4">
        @if (hotel != null)
        {
            <MudTypography Typo="Typo.h4" Class="mb-2">@hotel.Name</MudTypography>
            <MudTypography Typo="Typo.subtitle1" Class="mb-4">@hotel.Description</MudTypography>
            <MudRating ReadOnly="true" SelectedValue="@hotel.Stars"  />
        }
        else
        {
            <MudTypography Typo="Typo.body1" Class="mud-text-center mt-4">Информация о отеле не найдена</MudTypography>
        }
    </MudPaper>
</MudContainer>
<MudContainer Class="margin-top: 10px">
<MudGrid>
    <MudItem xs="5" Class="mud-width-70">
        <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" />
        </MudItem>
        <MudItem xs="5">
            <MudExpansionPanel Variant="Variant.Text">@*будет переделать на mudselect с кастомными полями*@
                <TitleContent>
                    <div class="d-flex">
                       <MudText>@persons().ToString() @namePersons(), @roomcount().ToString() @nameRooms() </MudText>  
                    </div>
                </TitleContent>
                <ChildContent>
                    <ExpansionPanelDetails>
                        <div class="d-flex flex-column w-100">
                                @foreach (var (card, index) in cards.Select((card, index) => (card, index)))
                            {
                                <MudTypography class="d-flex align-items-center">
									<strong class="mr-2">@(@index + 1) номер</strong>
                                    <div class="ml-auto">
                                        @if (roomcount() > 1)
                                        {
                                            <MudButton OnClick="@(() => RemoveRoomCardDto(card))" >Удалить</MudButton>
                                        }
                                    </div>
                                </MudTypography>
                                <MudRoomCardDto Class="mud-elevation-2 mb-2">
                                    <RoomCardDtoContent>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <MudButton OnClick="@(() => Subtract(card))" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@IsSubtractDisabled(card)">-</MudButton>
                                            <MudTypography Typo="Typo.h5" Class="mb-2 align-text-center">@card.Capacity</MudTypography>
                                            <MudButton OnClick="@(() => Add(card))" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@IsAddDisabled(card)">+</MudButton>
                                             
                                         </div>
                                          

                                    </RoomCardDtoContent>
                                </MudRoomCardDto>
                            }
                            @if (!IsAddRoomDisabled())
                            {
                                <MudButton OnClick="@AddRoomCardDto" Color="Color.Primary">+ Добавить номер</MudButton>
                            }
                        </div>
                    </ExpansionPanelDetails>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
        <MudItem xs="2">
            <MudButton OnClick="@ShowRooms" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary">Найти</MudButton>
        </MudItem>
</MudGrid>
</MudContainer>
<MudContainer>
    <MudGrid Spacing="2">
        <style>
            .container {
                width: 50%;
                margin: 20px auto; /* отступ сверху */
                border: 1px solid #ccc;
                padding: 10px;
                display: flex;
                flex-direction: row;
                justify-content: space-between;
                align-items: center;
            }

            .separator {
                border-left: 1px solid #ccc; /* вертикальные разделители */
                height: 100%; /* чтобы разделители были одинаковой высоты */
                margin: 0 10px;
            }
        </style>
        @if (filteredRooms != null && filteredRooms.Any())
        {
            @foreach (var room in filteredRooms)
            {
                

                <div class="container">
                    <div>
                        <span>@room.RoomType</span>
                        <hr />
                        <span>@room.Description</span>
                    </div>
                    <div class="separator"></div>
                    <div>
                        <span>2</span>
                    </div>
                    <div class="separator"></div>
                    <div>
                        <span>$@room.PricePerNight</span>
                    </div>
                    <div class="separator"></div>
                    <div>
						@if (isRoomInCart(room))
						{
							<MudButton OnClick="@(() => RemoveFromCart(room))" Color="Color.Error">Убрать из корзины</MudButton>
						}
						else
						{
							<MudButton OnClick="@(() => AddToCart(room))" Color="Color.Primary">Добавить в корзину</MudButton>
						}
                    </div>
                </div>

            }
            
        }
        else
        {
            <MudTypography Typo="Typo.body1" Class="mud-text-center mt-4">Нет доступных комнат</MudTypography>
        }
    </MudGrid>
</MudContainer>






@code {
    private HotelDto hotel;

    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
    private bool _isMenuOpen = false;
    private class Icons
    {
        public class Filled
        {
            public const string Menu = "@iconify-icons/mdi-light/menu";
            public const string ArrowDropDown = "@iconify-icons/mdi-light/arrow-drop-down";
        }
    }

    private List<RoomCardDto> cards = new List<RoomCardDto>();
    private int persons()
    {
        int pers = 0;
        foreach (var card in cards)
        {
            pers = pers + card.Capacity;
        }
        return pers;
    }
    private string namePersons()
    {
        int countpersons = persons();
        if (countpersons == 1 || countpersons == 21 || countpersons == 31) { return "гость"; }
        if (countpersons >= 2 && countpersons <= 4 || countpersons >= 22 && countpersons <= 24 || countpersons >= 32 && countpersons <= 34) { return "гостя"; }
        if (countpersons >= 5) { return "гостей"; }
        return "гостей";
    }
    private int roomcount()
    {
        return cards.Count;
    }
    private string nameRooms()
    {
        int countRooms = roomcount();
        if (countRooms == 1) { return "комната"; }
        if (countRooms >= 2 && countRooms <= 4) { return "комнаты"; }
        if (countRooms >= 5 && countRooms <= 6) { return "комнат"; }
        return "комнат";
    }
    private void AddRoomCardDto()
    {
        var newRoomCardDto = new RoomCardDto { Capacity = 1 };
        cards.Add(newRoomCardDto);
    }

    private void RemoveRoomCardDto(RoomCardDto card)
    {
        cards.Remove(card);
    }

    private void Add(RoomCardDto card)
    {
        card.Capacity++;
    }

    private void Subtract(RoomCardDto card)
    {
        if (card.Capacity > 1)
        {
            card.Capacity--;
        }
    }
    private bool IsAddRoomDisabled() => cards.Count >= 6;
    private bool IsAddDisabled(RoomCardDto card) => card.Capacity >= 6;
    private bool IsSubtractDisabled(RoomCardDto card) => card.Capacity <= 1;



    [Parameter]
    public int hotelId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Получение информации о номерах из localStorage

        var roomInfoJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedRooms");

        var datesJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedDates");

        if (roomInfoJson == null)
        {
            cards.Add(new RoomCardDto { Capacity = 2 });
        }
        else
        {
            cards = JsonSerializer.Deserialize<List<RoomCardDto>>(roomInfoJson);
        }

        if (datesJson != null)
        {
            var dates = JsonSerializer.Deserialize<Dictionary<string, DateTime>>(datesJson);
            var checkinDate = dates.GetValueOrDefault("Checkin");
            var checkoutDate = dates.GetValueOrDefault("Checkout");
            _dateRange = new DateRange(checkinDate, checkoutDate);
        }

        foreach (var roomCapacity in cards)
        {
            Console.WriteLine($"Room Capacity: {roomCapacity}");
        }


        hotel = await _hotelService.GetById(hotelId);




        var roomInCartJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "roomsinCart");

        try
        {
            roomsInCart = JsonSerializer.Deserialize<List<RoomDto>>(roomInCartJson);
        }
        catch (Exception ex)
        {
            roomsInCart = new List<RoomDto>();
            Console.WriteLine($"Error deserializing roomInCartJson: {ex.Message}");
        }

        await ShowRooms();
    }


    List<RoomDto> filteredRooms;
    public async Task ShowRooms()
    {
        var filter = new FilterRoomDto { guests = persons(), 
                Checkin = _dateRange.Start.GetValueOrDefault(),
                CheckOut = _dateRange.End.GetValueOrDefault(),
                hotelId = hotelId
        };
        filteredRooms = await _roomservice.GetFilteredRooms(filter);



    }
    private List<RoomDto> roomsInCart;
    private bool isRoomInCart(RoomDto room)
    {
        if (roomsInCart != null)
        {
            return roomsInCart.Any(r => r.Id == room.Id);
        }

        return false;

    }
    private async Task AddToCart(RoomDto room)
    {
        
        roomsInCart.Add(room);

        
        var selectedRoomsJson = JsonSerializer.Serialize(roomsInCart);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "roomsinCart", selectedRoomsJson);

        
        var selectedDatesJson = JsonSerializer.Serialize(new Dictionary<string, DateTime>
        {
            { "Checkin", _dateRange.Start.GetValueOrDefault() },
            { "Checkout", _dateRange.End.GetValueOrDefault() }
        });
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedDates", selectedDatesJson);
    }
    private async Task RemoveFromCart(RoomDto room)
    {
        var roomToRemove = roomsInCart.FirstOrDefault(c => c.Id == room.Id);
        if (roomToRemove != null)
        {
            roomsInCart.Remove(roomToRemove);
        }

        
        var selectedRoomsJson = JsonSerializer.Serialize(roomsInCart);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "roomsinCart", selectedRoomsJson);

        var selectedDatesJson = JsonSerializer.Serialize(new Dictionary<string, DateTime>
        {
            { "Checkin", _dateRange.Start.GetValueOrDefault() },
            { "Checkout", _dateRange.End.GetValueOrDefault() }
        });
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedDates", selectedDatesJson);

    }

    //room card navigate booking
}
