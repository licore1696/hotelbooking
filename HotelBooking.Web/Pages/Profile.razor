@page "/profile/"

@using HotelBooking.BookingDTO
@using HotelBooking.BookingDTO.UserDTOs
@using HotelBooking.Services.Contracts
@using HotelBooking.Web.Requests

@inject ISnackbar Snackbar
@inject IUserService _userService
@inject NavigationManager NavigationManager
@inject ApiTokenService _tokenService

<MudContainer>
    <MudPaper Elevation="0" Class="p-6" Style="max-width: 400px; margin: auto; margin-top: 100px; text-align: center;">
        <MudTypography Typo="Typo.h3" Class="mb-4"  style="margin: 0; font-size: 25px;">Профиль пользователя</MudTypography>

        <MudTextField Variant="Variant.Outlined" Required="true" Label="Имя пользователя" @bind-Value="UserData.Username" Class="mb-4" ReadOnly="true" />
        <MudTextField Variant="Variant.Outlined" Required="true" Label="Электронная почта" @bind-Value="UserData.Email" Class="mb-4" ReadOnly="!isEditMode" />
        <MudTextField Variant="Variant.Outlined" Required="true" Label="Имя" @bind-Value="UserData.FirstName" Class="mb-4" ReadOnly="!isEditMode" />
        <MudTextField Variant="Variant.Outlined" Required="true" Label="Фамилия" @bind-Value="UserData.LastName" Class="mb-4" ReadOnly="!isEditMode" />

        @if (isEditMode)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="position-relative mb-4" Style="width: 100%; border-radius: 20px;" OnClick="HandleSave">Сохранить изменения</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="position-relative mb-4 border-radius: 20px;" OnClick="HandleEdit">Редактировать</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" Class="position-relative mb-4 border-radius: 20px;" OnClick="HandleDelete">Удалить аккаунт</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="position-relative mb-4" Style="width: 100%; border-radius: 20px;" OnClick="HandleLogout">Выйти</MudButton>
        }
    </MudPaper>
</MudContainer>

@code {

    private UpdateUserDto UserData { get; set; } = new UpdateUserDto();

    private bool isEditMode = false;

    [Parameter]
    public int userId{ get; set; }


    private async Task LoadUserData()
    {
        try
        {
            var existingUser = await _userService.GetProfile(userId);

            if (existingUser != null)
            {
                UserData = existingUser;
            }
            else
            {
                Snackbar.Add("Пользователь не найден", Severity.Error);
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Произошла ошибка при загрузке данных", Severity.Error);
        }
    }

    private async void HandleEdit()
    {
        isEditMode = true;
    }

    private async Task HandleSave()
    {
        isEditMode = false;

        var EditedUser = await _userService.UpdateUser(UserData);

        Snackbar.Add("Информация успешно обновлена", Severity.Success);
        NavigationManager.NavigateTo($"/profile/");
    }

    private async Task HandleDelete()
    {
        if(await _userService.Delete(userId))
        {
            Snackbar.Add("Пользователь удален", Severity.Success);
        }
        else
        {
            Snackbar.Add("Действие сессии прекращено", Severity.Error);
        }
        NavigationManager.NavigateTo("/login");
    }
    private async Task HandleLogout()
    {
        await _tokenService.RemoveToken();
        NavigationManager.NavigateTo($"/login");
    }
    protected override async Task OnInitializedAsync()
    {

        var token = await _tokenService.GetToken();

        if (string.IsNullOrEmpty(token))
        {

            NavigationManager.NavigateTo("/login");
        }
        else
        {
            userId = await _tokenService.GetUserIdFromToken();
            if (userId == -1) { NavigationManager.NavigateTo("/login"); Snackbar.Add("Действие ссессии прекращено", Severity.Error); }
            
                await LoadUserData();
            

            
        }
    }
}
